{
  "hash": "5ee0d0963e3ba528613749414a05a2b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Good workflow practices\"\nsubtitle: \"Prerequisites\"\nexecute:\n  echo: true\nformat: \n  revealjs:\n    slide-number: true\n    incremental: true\n    theme: [\"../../templates/slides-style.scss\"]\n    logo: https://www.stat.uci.edu/bayes-bats/img/logo.png\n    title-slide-attributes: \n      data-background-image: https://www.stat.uci.edu/bayes-bats/img/logo.png\n      data-background-size: 12%\n      data-background-position: 50% 75%\n---\n\n\n\n## Naming files\n\n::: {.nonincremental}\n\nThree principles of naming files \n\n- machine readable\n- human readable\n- plays well with default ordering (e.g. alphabetical and numerical ordering)\n\n(Jenny Bryan)\n\nfor the purposes of this bootcamp an additional principle is that file names follow\n\n- tidyverse style (all lower case letters, words separated by HYPHEN)\n\n:::\n\n## README.md\n\n- README file is the first file users read. In our case a user might be our future self, a teammate, or (if open source) anyone.\n\n\n\n- There can be multiple README files within a single directory: e.g. for the general project folder and then for a data subfolder. Data folder README's can possibly contain codebook (data dictionary).\n\n\n\n- It should be brief but detailed enough to help user navigate. \n\n\n\n- a README should be up-to-date (can be updated throughout a project's lifecycle as needed).\n\n\n\n- On GitHub we use markdown for README file (`README.md`). Good news: [emojis are supported.](https://gist.github.com/rxaviers/7360908)\n\n\n\n## README examples\n\n- [ICS 80 website](https://github.com/ics80-fa21/website)\n- [Museum of Modern Art Collection](https://github.com/MuseumofModernArt/collection)\n- [R package bayesrules](https://github.com/bayes-rules/bayesrules)\n\n## R Packages\n\n__Default__\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/office-suite-default.png){width=60%}\n:::\n:::\n\n\n\n\n\nMicrosoft products have Copyright. Images used based on [fair use](https://www.microsoft.com/en-us/legal/copyright/default.aspx) for educational purposes.\n\n## R Packages\n\n__Optional__\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/office-suite-optional.png){width=60%}\n:::\n:::\n\n\n\n\n## R packages\n\n\n- When you download R, you actually download base R. \n\n\n\n- But there are MANY optional packages you can download.\n\n\n- Good part: There is an R package for (almost) everything, from complex statistical modeling packages to baby names.\n\n\n\n- Bad part: At the beginning it can feel overwhelming. \n\n- All this time we have actually been using R packages. \n\n\n## R packages\n\nWhat do R packages have? All sorts of things but mainly\n\n- functions \n\n- datasets\n\n\n## R packages\n\nTry running the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeep()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in beep(): could not find function \"beep\"\n```\n\n\n:::\n:::\n\n\n\nWhy are we seeing this error? \n\n\n\n:::{.font75}\n\nInstalling packages\n\n:::\n\n\n## Using `install.packages()`\n\nIn your **Console**, install the beepr package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"beepr\")\n```\n:::\n\n\n\nWe do this in the Console because we only need to do it once.\n\n\n\n## Using Packages pane\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/packages-pane.png){fig-align='center' width=40%}\n:::\n:::\n\n\n\nPackages Pane > Install \n\n\n\n## Letting RStudio Install\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/rstudio-install.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nIf you save your file and using a package RStudio will tell you that you have not installed the package.\n\n\n\n\n:::{.font75}\n\nUsing packages\n\n:::\n\n\n\n## Using beep() from beepr\n\n\nOption 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(beepr)\nbeep()\n```\n:::\n\n\n\nMore common usage. \n\nUseful if you are going to use multiple functions from the same package.\nE.g. we have used many functions (ggplot, aes, geom_...) from the ggplot2 package. In such cases, usual practice is to put the library name in the first R chunk in the .Rmd file.\n\n\n\n## Using beep() from beepr\n\nOption 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeepr::beep()\n```\n:::\n\n\nUseful when you are going to use a function once or few times. Also useful if there are any conflicts. For instance if there is some other package in your environment that has a beep() function that prints the word beep, you would want to distinguish the beep function from the beepr package and the beep function from the other imaginary package. \n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/beep-help.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Open Source\n\n- Any one around the world can create R packages. \n\n\n\n- Good part: We are able to do pretty much anything R because someone from around the world has developed the package and shared it. \n\n\n- Bad part: The language can be inconsistent. \n\n\n- Good news: We have tidyverse. \n\n\n\n## Tidyverse\n\n\n>The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. \n                  tidyverse.org\n\n\n## Tidyverse\n\nIn short, tidyverse is a family of packages. From practical stand point, you can install many tidyverse packages at once (and you did this). By doing that you installed all the following packages.\n\n- ggplot2\n- dplyr\n- tidyr\n- readr\n- purrr\n- tibble\n- stringr\n- forcats\n\n##\n\nWe can also load multiple tidyverse packages all at the same time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n## Fun fact\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/pipe-logo.png){fig-align='center' width=40%}\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n[Treachery of Images](https://en.wikipedia.org/wiki/The_Treachery_of_Images#/media/File:MagrittePipe.jpg) by René Magritte\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/magritte.jpg){fig-align='center' width=70%}\n:::\n:::\n\n\n\nImage for Treachery of Images is from University of Alabama [website](https://tcf.ua.edu/Classes/Jbutler/T311/Modernism.htm) and used under fair use for educational purposes.\n\n:::\n\n::::\n\n\n## Importing .csv Data \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::read_csv(\"dataset.csv\")\n```\n:::\n\n\n\n\n## Importing Excel Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadxl::read_excel(\"dataset.xlsx\")\n```\n:::\n\n\n\n\n## Importing Excel Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadxl::read_excel(\"dataset.xlsx\", sheet = 2)\n```\n:::\n\n\n\n\n## Importing SAS, SPSS, Stata Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\n# SAS\nread_sas(\"dataset.sas7bdat\")\n# SPSS\nread_sav(\"dataset.sav\")\n# Stata\nread_dta(\"dataset.dta\")\n```\n:::\n\n\n\n\n## Where is the dataset file?\n\nImporting data will depend on where the dataset is on your computer. However we use the help of `here::here()` function. \nThis function sets the working directory to the project folder (i.e. where the `.Rproj` file is).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(here::here(\"data/dataset.csv\"))\n```\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.002.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.003.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.004.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.005.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.006.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.007.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.008.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\nIf each change is made by one collaborator at a time, this would not be an efficient workflow. \n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.009.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.010.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.011.jpeg){width=90%}\n:::\n:::\n\n\n\n## Collaboration on GitHub\n\n1 - commit\n\n2 - pull (very important)\n\n3 - push\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.013.jpeg){width=90%}\n:::\n:::\n\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.014.jpeg){width=90%}\n:::\n:::\n\n\n\n\n## Collaboration on GitHub\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/git-collab.015.jpeg){width=90%}\n:::\n:::\n\n\n\n\n## Opening an issue\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/create-issue.png){width=90%}\n:::\n:::\n\n\n\nWe can create an **issue** to keep a list of mistakes to be fixed, ideas to check with teammates, or note a to-do task. You can assign tasks to yourself or teammates. \n\n## Closing an issue\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/issue-number.png){width=90%}\n:::\n:::\n\n\n\nIf you are working on an issue, it makes sense to refer to issue number in your commit message (e.g. \"add first draft of alternate texts for #4\"). \nIf your commit resolves the issue then you can use key words such as \"fixes #4\" or \"closes #4\" to close the issue. \nIssues can also be manually closed.\n\n##\n\nIt is also a good practice to save session information as package versions change, in order to be able to reproduce results from an analysis we need to know under what technical conditions the analysis was conducted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] magrittr_2.0.3  lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n [5] dplyr_1.1.4     purrr_1.0.2     readr_2.1.5     tidyr_1.3.1    \n [9] tibble_3.2.1    ggplot2_3.5.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5      jsonlite_1.8.8    compiler_4.4.0    renv_1.0.7       \n [5] tidyselect_1.2.1  scales_1.3.0      yaml_2.3.8        fastmap_1.2.0    \n [9] R6_2.5.1          generics_0.1.3    knitr_1.47        munsell_0.5.1    \n[13] pillar_1.9.0      tzdb_0.4.0        rlang_1.1.4       utf8_1.2.4       \n[17] stringi_1.8.4     xfun_0.44         timechange_0.3.0  cli_3.6.2        \n[21] withr_3.0.0       digest_0.6.35     grid_4.4.0        rstudioapi_0.16.0\n[25] hms_1.1.3         lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0  \n[29] glue_1.7.0        codetools_0.2-20  fansi_1.0.6       colorspace_2.1-0 \n[33] rmarkdown_2.27    tools_4.4.0       pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}