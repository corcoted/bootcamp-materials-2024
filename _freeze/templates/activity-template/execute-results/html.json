{
  "hash": "e4476998bda3c76c99077a4afa8e74a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Amazing activity\"\nsubtitle: \"Day 1\"\ntitle-block-banner: true\nformat:\n  html:\n    toc: true\n    toc-title: \"What's in this template?\"\n    toc-location: left\n    html-math-method: katex\n    theme: \n      -  activity-style.scss\n    page-layout: full\n    embed-resources: true\n    fig-align: center\neditor: source\n---\n\n\n\nAcknowledgements: this material was largely learned, or borrowed, from the USCOTS 23 workshop on Quarto by Hunter Glanz, Emily Robinson and Allison Theobold.\n\n## Unordered list {#ul}\n\nYou can use typical markdown formatting, such as:\n\n-   **bold** text\n-   *italic* text\n-   `code-looking`text\n-   [link](https://bayes-bats.github.io/website/)\n\n## Ordered list\n\n.. and such as:\n\n1.  [important]{.underline} text\n\n2.  Superscripted^1^\n\n3.  Subscripted~1~\n\n## Figures\n\nThere are at least two ways you can include figures:\n\n```         \n![The Bayes BATS logo (included with Markdown) ](img/logo-white.png){fig-alt=\"A hex logo with a yellow background, a marron border and the text Bayes BATS in blue, with a black bat icon underneath\" fig-align=\"center\" width=\"100\"}\n```\n\n![The Bayes BATS logo (included with Markdown)](img/logo-white.png){fig-alt=\"A hex logo with a yellow background, a marron border and the text Bayes BATS in blue, with a black bat icon underneath\" fig-align=\"center\" width=\"100\"}\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| fig-cap: The Bayes BATS logo (included with R chunk)\n#| out-width: 15%\nknitr::include_graphics(\"img/logo-white.png\")\n```\n````\n\n::: {.cell-output-display}\n![The Bayes BATS logo (included with R chunk)](img/logo-white.png){width=15%}\n:::\n:::\n\n\n\n## Code chunks\n\n### Classic code chunk\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n### Code chunk that only shows output\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n### Code chunk that only shows the code (but is not evaluated)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n:::\n\n\n\n### Cool code that unfolds and shows you code only if you want!\n\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| code-fold: true\n2 + 2\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n### Long code chunks (better not?)\n\nNote that if your code is exceptionally long, it can be visualized by scrolling (what number is added at the end?)\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 888888\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 888966\n```\n\n\n:::\n:::\n\n\n\n## Columns\n\n### Two equally-sized columns\n\n::: columns\n::: column\nThis is the left column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\nThis is the right column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n### Two differently-sized columns\n\n::: columns\n::: {.column width=\"25%\"}\nThis is the left column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"75%\"}\nThis is the right column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n### Three columns?\n\n::: columns\n::: {.column width=\"30%\"}\nThis is the left column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\nThis is the **central** column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\nThis is the **right** column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n### Two columns with some space between them (_little hacky_)\n\n::: columns\n::: {.column width=\"49%\"}\nThis is the left column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\nThis is the **right** column!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n\n## Callouts\n\nCute ways to highlight something (from [Quarto documentation](https://quarto.org/docs/authoring/callouts.html#callout-types))\n\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n\n::: {.callout-important title=\"Tip with Title, that collapses!\" collapse=\"true\"}\nThis is a callout with a title and that also collapses.\n:::\n\n## Cross references \n\nYou might want to link to a section or subsection within the same Quarto document.\n\nAssign a section ID to the header by including `#ID` after the title header (e.g. `## Unordered list {#ul}`).\n\nThen you can cross reference it:\nSee [Unordered list](#ul) for how to make an unordered list.\n\n## Tabsets\n\nThese are cool ways to divide content into clickable tabs.\n\n::: panel-tabset\n\n## Tab 1\n\nContent for the first tab.\n\n## Tab 2\n\nContent for the second tab.\n\n:::\n\n## Footnotes\n\nHere is a footnote reference[^1]\n\n[^1]: Here is the first footnote.\n\nHere is another footnote reference[^2]\n\n[^2]: Here is the second footnote.\n\n## Margins\n\nYou can put information in the margins of a document:\n\n::: column-margin\nContent for the margin.\n:::\n\n### You can place output in the margins\n\nThis table to the right is the output of a code chunk!\n\n\n\n::: {.cell .column-margin}\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp\nMazda RX4         21.0   6  160\nMazda RX4 Wag     21.0   6  160\nDatsun 710        22.8   4  108\nHornet 4 Drive    21.4   6  258\nHornet Sportabout 18.7   8  360\nValiant           18.1   6  225\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}